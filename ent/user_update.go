// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend-demo/ent/bank"
	"backend-demo/ent/predicate"
	"backend-demo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPhotoURL sets the "photo_url" field.
func (uu *UserUpdate) SetPhotoURL(s string) *UserUpdate {
	uu.mutation.SetPhotoURL(s)
	return uu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhotoURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhotoURL(*s)
	}
	return uu
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (uu *UserUpdate) ClearPhotoURL() *UserUpdate {
	uu.mutation.ClearPhotoURL()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetAccountCode sets the "account_code" field.
func (uu *UserUpdate) SetAccountCode(s string) *UserUpdate {
	uu.mutation.SetAccountCode(s)
	return uu
}

// SetNillableAccountCode sets the "account_code" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccountCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetAccountCode(*s)
	}
	return uu
}

// ClearAccountCode clears the value of the "account_code" field.
func (uu *UserUpdate) ClearAccountCode() *UserUpdate {
	uu.mutation.ClearAccountCode()
	return uu
}

// SetBankCode sets the "bank_code" field.
func (uu *UserUpdate) SetBankCode(s string) *UserUpdate {
	uu.mutation.SetBankCode(s)
	return uu
}

// SetNillableBankCode sets the "bank_code" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBankCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetBankCode(*s)
	}
	return uu
}

// ClearBankCode clears the value of the "bank_code" field.
func (uu *UserUpdate) ClearBankCode() *UserUpdate {
	uu.mutation.ClearBankCode()
	return uu
}

// SetBranchCode sets the "branch_code" field.
func (uu *UserUpdate) SetBranchCode(s string) *UserUpdate {
	uu.mutation.SetBranchCode(s)
	return uu
}

// SetNillableBranchCode sets the "branch_code" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBranchCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetBranchCode(*s)
	}
	return uu
}

// ClearBranchCode clears the value of the "branch_code" field.
func (uu *UserUpdate) ClearBranchCode() *UserUpdate {
	uu.mutation.ClearBranchCode()
	return uu
}

// SetBanksID sets the "banks" edge to the Bank entity by ID.
func (uu *UserUpdate) SetBanksID(id int) *UserUpdate {
	uu.mutation.SetBanksID(id)
	return uu
}

// SetNillableBanksID sets the "banks" edge to the Bank entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableBanksID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetBanksID(*id)
	}
	return uu
}

// SetBanks sets the "banks" edge to the Bank entity.
func (uu *UserUpdate) SetBanks(b *Bank) *UserUpdate {
	return uu.SetBanksID(b.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearBanks clears the "banks" edge to the Bank entity.
func (uu *UserUpdate) ClearBanks() *UserUpdate {
	uu.mutation.ClearBanks()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.PhotoURL(); ok {
		_spec.SetField(user.FieldPhotoURL, field.TypeString, value)
	}
	if uu.mutation.PhotoURLCleared() {
		_spec.ClearField(user.FieldPhotoURL, field.TypeString)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.AccountCode(); ok {
		_spec.SetField(user.FieldAccountCode, field.TypeString, value)
	}
	if uu.mutation.AccountCodeCleared() {
		_spec.ClearField(user.FieldAccountCode, field.TypeString)
	}
	if value, ok := uu.mutation.BankCode(); ok {
		_spec.SetField(user.FieldBankCode, field.TypeString, value)
	}
	if uu.mutation.BankCodeCleared() {
		_spec.ClearField(user.FieldBankCode, field.TypeString)
	}
	if value, ok := uu.mutation.BranchCode(); ok {
		_spec.SetField(user.FieldBranchCode, field.TypeString, value)
	}
	if uu.mutation.BranchCodeCleared() {
		_spec.ClearField(user.FieldBranchCode, field.TypeString)
	}
	if uu.mutation.BanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BanksTable,
			Columns: []string{user.BanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BanksTable,
			Columns: []string{user.BanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPhotoURL sets the "photo_url" field.
func (uuo *UserUpdateOne) SetPhotoURL(s string) *UserUpdateOne {
	uuo.mutation.SetPhotoURL(s)
	return uuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhotoURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhotoURL(*s)
	}
	return uuo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (uuo *UserUpdateOne) ClearPhotoURL() *UserUpdateOne {
	uuo.mutation.ClearPhotoURL()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetAccountCode sets the "account_code" field.
func (uuo *UserUpdateOne) SetAccountCode(s string) *UserUpdateOne {
	uuo.mutation.SetAccountCode(s)
	return uuo
}

// SetNillableAccountCode sets the "account_code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccountCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAccountCode(*s)
	}
	return uuo
}

// ClearAccountCode clears the value of the "account_code" field.
func (uuo *UserUpdateOne) ClearAccountCode() *UserUpdateOne {
	uuo.mutation.ClearAccountCode()
	return uuo
}

// SetBankCode sets the "bank_code" field.
func (uuo *UserUpdateOne) SetBankCode(s string) *UserUpdateOne {
	uuo.mutation.SetBankCode(s)
	return uuo
}

// SetNillableBankCode sets the "bank_code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBankCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBankCode(*s)
	}
	return uuo
}

// ClearBankCode clears the value of the "bank_code" field.
func (uuo *UserUpdateOne) ClearBankCode() *UserUpdateOne {
	uuo.mutation.ClearBankCode()
	return uuo
}

// SetBranchCode sets the "branch_code" field.
func (uuo *UserUpdateOne) SetBranchCode(s string) *UserUpdateOne {
	uuo.mutation.SetBranchCode(s)
	return uuo
}

// SetNillableBranchCode sets the "branch_code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBranchCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBranchCode(*s)
	}
	return uuo
}

// ClearBranchCode clears the value of the "branch_code" field.
func (uuo *UserUpdateOne) ClearBranchCode() *UserUpdateOne {
	uuo.mutation.ClearBranchCode()
	return uuo
}

// SetBanksID sets the "banks" edge to the Bank entity by ID.
func (uuo *UserUpdateOne) SetBanksID(id int) *UserUpdateOne {
	uuo.mutation.SetBanksID(id)
	return uuo
}

// SetNillableBanksID sets the "banks" edge to the Bank entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanksID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetBanksID(*id)
	}
	return uuo
}

// SetBanks sets the "banks" edge to the Bank entity.
func (uuo *UserUpdateOne) SetBanks(b *Bank) *UserUpdateOne {
	return uuo.SetBanksID(b.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearBanks clears the "banks" edge to the Bank entity.
func (uuo *UserUpdateOne) ClearBanks() *UserUpdateOne {
	uuo.mutation.ClearBanks()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PhotoURL(); ok {
		_spec.SetField(user.FieldPhotoURL, field.TypeString, value)
	}
	if uuo.mutation.PhotoURLCleared() {
		_spec.ClearField(user.FieldPhotoURL, field.TypeString)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.AccountCode(); ok {
		_spec.SetField(user.FieldAccountCode, field.TypeString, value)
	}
	if uuo.mutation.AccountCodeCleared() {
		_spec.ClearField(user.FieldAccountCode, field.TypeString)
	}
	if value, ok := uuo.mutation.BankCode(); ok {
		_spec.SetField(user.FieldBankCode, field.TypeString, value)
	}
	if uuo.mutation.BankCodeCleared() {
		_spec.ClearField(user.FieldBankCode, field.TypeString)
	}
	if value, ok := uuo.mutation.BranchCode(); ok {
		_spec.SetField(user.FieldBranchCode, field.TypeString, value)
	}
	if uuo.mutation.BranchCodeCleared() {
		_spec.ClearField(user.FieldBranchCode, field.TypeString)
	}
	if uuo.mutation.BanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BanksTable,
			Columns: []string{user.BanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BanksTable,
			Columns: []string{user.BanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
