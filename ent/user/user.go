// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhotoURL holds the string denoting the photo_url field in the database.
	FieldPhotoURL = "photo_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAccountCode holds the string denoting the account_code field in the database.
	FieldAccountCode = "account_code"
	// FieldBankCode holds the string denoting the bank_code field in the database.
	FieldBankCode = "bank_code"
	// FieldBranchCode holds the string denoting the branch_code field in the database.
	FieldBranchCode = "branch_code"
	// EdgeBanks holds the string denoting the banks edge name in mutations.
	EdgeBanks = "banks"
	// Table holds the table name of the user in the database.
	Table = "users"
	// BanksTable is the table that holds the banks relation/edge.
	BanksTable = "users"
	// BanksInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	BanksInverseTable = "banks"
	// BanksColumn is the table column denoting the banks relation/edge.
	BanksColumn = "bank_code"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPhotoURL,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAccountCode,
	FieldBankCode,
	FieldBranchCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhotoURL orders the results by the photo_url field.
func ByPhotoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAccountCode orders the results by the account_code field.
func ByAccountCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountCode, opts...).ToFunc()
}

// ByBankCode orders the results by the bank_code field.
func ByBankCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankCode, opts...).ToFunc()
}

// ByBranchCode orders the results by the branch_code field.
func ByBranchCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranchCode, opts...).ToFunc()
}

// ByBanksField orders the results by banks field.
func ByBanksField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBanksStep(), sql.OrderByField(field, opts...))
	}
}
func newBanksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BanksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BanksTable, BanksColumn),
	)
}
