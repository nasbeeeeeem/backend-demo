// Code generated by ent, DO NOT EDIT.

package user

import (
	"backend-demo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// PhotoURL applies equality check predicate on the "photo_url" field. It's identical to PhotoURLEQ.
func PhotoURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhotoURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// AccountCode applies equality check predicate on the "account_code" field. It's identical to AccountCodeEQ.
func AccountCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccountCode, v))
}

// BankCode applies equality check predicate on the "bank_code" field. It's identical to BankCodeEQ.
func BankCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBankCode, v))
}

// BranchCode applies equality check predicate on the "branch_code" field. It's identical to BranchCodeEQ.
func BranchCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBranchCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PhotoURLEQ applies the EQ predicate on the "photo_url" field.
func PhotoURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhotoURL, v))
}

// PhotoURLNEQ applies the NEQ predicate on the "photo_url" field.
func PhotoURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhotoURL, v))
}

// PhotoURLIn applies the In predicate on the "photo_url" field.
func PhotoURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhotoURL, vs...))
}

// PhotoURLNotIn applies the NotIn predicate on the "photo_url" field.
func PhotoURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhotoURL, vs...))
}

// PhotoURLGT applies the GT predicate on the "photo_url" field.
func PhotoURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhotoURL, v))
}

// PhotoURLGTE applies the GTE predicate on the "photo_url" field.
func PhotoURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhotoURL, v))
}

// PhotoURLLT applies the LT predicate on the "photo_url" field.
func PhotoURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhotoURL, v))
}

// PhotoURLLTE applies the LTE predicate on the "photo_url" field.
func PhotoURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhotoURL, v))
}

// PhotoURLContains applies the Contains predicate on the "photo_url" field.
func PhotoURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhotoURL, v))
}

// PhotoURLHasPrefix applies the HasPrefix predicate on the "photo_url" field.
func PhotoURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhotoURL, v))
}

// PhotoURLHasSuffix applies the HasSuffix predicate on the "photo_url" field.
func PhotoURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhotoURL, v))
}

// PhotoURLIsNil applies the IsNil predicate on the "photo_url" field.
func PhotoURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPhotoURL))
}

// PhotoURLNotNil applies the NotNil predicate on the "photo_url" field.
func PhotoURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPhotoURL))
}

// PhotoURLEqualFold applies the EqualFold predicate on the "photo_url" field.
func PhotoURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhotoURL, v))
}

// PhotoURLContainsFold applies the ContainsFold predicate on the "photo_url" field.
func PhotoURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhotoURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// AccountCodeEQ applies the EQ predicate on the "account_code" field.
func AccountCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAccountCode, v))
}

// AccountCodeNEQ applies the NEQ predicate on the "account_code" field.
func AccountCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAccountCode, v))
}

// AccountCodeIn applies the In predicate on the "account_code" field.
func AccountCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAccountCode, vs...))
}

// AccountCodeNotIn applies the NotIn predicate on the "account_code" field.
func AccountCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAccountCode, vs...))
}

// AccountCodeGT applies the GT predicate on the "account_code" field.
func AccountCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAccountCode, v))
}

// AccountCodeGTE applies the GTE predicate on the "account_code" field.
func AccountCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAccountCode, v))
}

// AccountCodeLT applies the LT predicate on the "account_code" field.
func AccountCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAccountCode, v))
}

// AccountCodeLTE applies the LTE predicate on the "account_code" field.
func AccountCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAccountCode, v))
}

// AccountCodeContains applies the Contains predicate on the "account_code" field.
func AccountCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAccountCode, v))
}

// AccountCodeHasPrefix applies the HasPrefix predicate on the "account_code" field.
func AccountCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAccountCode, v))
}

// AccountCodeHasSuffix applies the HasSuffix predicate on the "account_code" field.
func AccountCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAccountCode, v))
}

// AccountCodeIsNil applies the IsNil predicate on the "account_code" field.
func AccountCodeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAccountCode))
}

// AccountCodeNotNil applies the NotNil predicate on the "account_code" field.
func AccountCodeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAccountCode))
}

// AccountCodeEqualFold applies the EqualFold predicate on the "account_code" field.
func AccountCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAccountCode, v))
}

// AccountCodeContainsFold applies the ContainsFold predicate on the "account_code" field.
func AccountCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAccountCode, v))
}

// BankCodeEQ applies the EQ predicate on the "bank_code" field.
func BankCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBankCode, v))
}

// BankCodeNEQ applies the NEQ predicate on the "bank_code" field.
func BankCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBankCode, v))
}

// BankCodeIn applies the In predicate on the "bank_code" field.
func BankCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBankCode, vs...))
}

// BankCodeNotIn applies the NotIn predicate on the "bank_code" field.
func BankCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBankCode, vs...))
}

// BankCodeGT applies the GT predicate on the "bank_code" field.
func BankCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBankCode, v))
}

// BankCodeGTE applies the GTE predicate on the "bank_code" field.
func BankCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBankCode, v))
}

// BankCodeLT applies the LT predicate on the "bank_code" field.
func BankCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBankCode, v))
}

// BankCodeLTE applies the LTE predicate on the "bank_code" field.
func BankCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBankCode, v))
}

// BankCodeContains applies the Contains predicate on the "bank_code" field.
func BankCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBankCode, v))
}

// BankCodeHasPrefix applies the HasPrefix predicate on the "bank_code" field.
func BankCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBankCode, v))
}

// BankCodeHasSuffix applies the HasSuffix predicate on the "bank_code" field.
func BankCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBankCode, v))
}

// BankCodeEqualFold applies the EqualFold predicate on the "bank_code" field.
func BankCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBankCode, v))
}

// BankCodeContainsFold applies the ContainsFold predicate on the "bank_code" field.
func BankCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBankCode, v))
}

// BranchCodeEQ applies the EQ predicate on the "branch_code" field.
func BranchCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBranchCode, v))
}

// BranchCodeNEQ applies the NEQ predicate on the "branch_code" field.
func BranchCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBranchCode, v))
}

// BranchCodeIn applies the In predicate on the "branch_code" field.
func BranchCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBranchCode, vs...))
}

// BranchCodeNotIn applies the NotIn predicate on the "branch_code" field.
func BranchCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBranchCode, vs...))
}

// BranchCodeGT applies the GT predicate on the "branch_code" field.
func BranchCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBranchCode, v))
}

// BranchCodeGTE applies the GTE predicate on the "branch_code" field.
func BranchCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBranchCode, v))
}

// BranchCodeLT applies the LT predicate on the "branch_code" field.
func BranchCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBranchCode, v))
}

// BranchCodeLTE applies the LTE predicate on the "branch_code" field.
func BranchCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBranchCode, v))
}

// BranchCodeContains applies the Contains predicate on the "branch_code" field.
func BranchCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBranchCode, v))
}

// BranchCodeHasPrefix applies the HasPrefix predicate on the "branch_code" field.
func BranchCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBranchCode, v))
}

// BranchCodeHasSuffix applies the HasSuffix predicate on the "branch_code" field.
func BranchCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBranchCode, v))
}

// BranchCodeIsNil applies the IsNil predicate on the "branch_code" field.
func BranchCodeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBranchCode))
}

// BranchCodeNotNil applies the NotNil predicate on the "branch_code" field.
func BranchCodeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBranchCode))
}

// BranchCodeEqualFold applies the EqualFold predicate on the "branch_code" field.
func BranchCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBranchCode, v))
}

// BranchCodeContainsFold applies the ContainsFold predicate on the "branch_code" field.
func BranchCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBranchCode, v))
}

// HasBanks applies the HasEdge predicate on the "banks" edge.
func HasBanks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BanksTable, BanksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBanksWith applies the HasEdge predicate on the "banks" edge with a given conditions (other predicates).
func HasBanksWith(preds ...predicate.Bank) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newBanksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
